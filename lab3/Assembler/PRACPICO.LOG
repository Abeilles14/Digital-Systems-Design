KCPSM3 Assembler log file for program 'pracpico.psm'.
Generated by KCPSM3 version 1.30
Ken Chapman (Xilinx Ltd) 2005.
01Mar2021-05:11:11

 Addr Code

 000                            ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
 000                            ;
 000                            ;
 000                            ;
 000                            ;
 000                            ; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
 000                            ; one second intervals.
 000                            ;
 000                            ;
 000                            ;**************************************************************************************
 000                            ; Port definitions
 000                            ;**************************************************************************************
 000                            ;
 000                            ;
 000                            ;
 000                            CONSTANT LED_port, 80               ;8 simple LEDs. Is an OUTPUT port.
 000                            CONSTANT LED_0_port, 40             ;LED 0
 000                            CONSTANT DATA_IN_PORT, 00           ;input data port. INPUT port
 000                            ; CONSTANT SSEG_PORT0, 40        ;7seg
 000                            ; CONSTANT SSEG_PORT1, 20
 000                            ; CONSTANT SSEG_PORT2, 10
 000                            ;**************************************************************************************
 000                            ; Special Register usage
 000                            ;**************************************************************************************
 000                            ;
 000                            ; No registers are given special names in this program.
 000                            ;
 000                            ;**************************************************************************************
 000                            ; Scratch Pad Memory Locations
 000                            ;**************************************************************************************
 000                            ;
 000                            ;
 000                            CONSTANT ISR_preserve_s0, 00        ;Preserve s0 contents during ISR
 000                            CONSTANT ISR_preserve_s1, 01        ;Preserve s1 contents during ISR
 000                            CONSTANT ISR_preserve_s2, 02        ;Preserve s2 contents during ISR
 000                            CONSTANT ISR_preserve_s3, 03        ;Preserve s3 contents during ISR
 000                            CONSTANT ISR_restore_s1, 04
 000                            CONSTANT ISR_restore_s2, 05
 000                            CONSTANT ISR_restore_s3, 06
 000                            ;
 000                            CONSTANT LED_pattern, 04            ;remember state of LEDs (8-bit counter in this case)
 000                            ;
 000                            ;**************************************************************************************
 000                            ; Useful data constants
 000                            ;**************************************************************************************
 000                            ;
 000                            ;
 000                            ; Constant to define a software delay of 1us. This must be adjusted to reflect the
 000                            ; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
 000                            ; calculation highly predictable. The '6' in the following equation even allows for
 000                            ; 'CALL delay_1us' instruction in the initiating code.
 000                            ;
 000                            ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 000                            ;
 000                            ; Example: For a 50MHz clock the constant value is (50-6)/4 = 11  (0B Hex).
 000                            ; For clock rates below 10MHz the value of 1 must be used and the operation will
 000                            ; become lower than intended. Interrupts may effect the timing of software based
 000                            ; delays.
 000                            ;
 000                            CONSTANT delay_1us_constant, 0B
 000                            ;
 000                            ;
 000                            ;
 000                            ; ASCII table
 000                            ;
 000                            CONSTANT character_a, 61
 000                            CONSTANT character_b, 62
 000                            CONSTANT character_c, 63
 000                            CONSTANT character_d, 64
 000                            CONSTANT character_e, 65
 000                            CONSTANT character_f, 66
 000                            CONSTANT character_g, 67
 000                            CONSTANT character_h, 68
 000                            CONSTANT character_i, 69
 000                            CONSTANT character_j, 6A
 000                            CONSTANT character_k, 6B
 000                            CONSTANT character_l, 6C
 000                            CONSTANT character_m, 6D
 000                            CONSTANT character_n, 6E
 000                            CONSTANT character_o, 6F
 000                            CONSTANT character_p, 70
 000                            CONSTANT character_q, 71
 000                            CONSTANT character_r, 72
 000                            CONSTANT character_s, 73
 000                            CONSTANT character_t, 74
 000                            CONSTANT character_u, 75
 000                            CONSTANT character_v, 76
 000                            CONSTANT character_w, 77
 000                            CONSTANT character_x, 78
 000                            CONSTANT character_y, 79
 000                            CONSTANT character_z, 7A
 000                            CONSTANT character_A, 41
 000                            CONSTANT character_B, 42
 000                            CONSTANT character_C, 43
 000                            CONSTANT character_D, 44
 000                            CONSTANT character_E, 45
 000                            CONSTANT character_F, 46
 000                            CONSTANT character_G, 47
 000                            CONSTANT character_H, 48
 000                            CONSTANT character_I, 49
 000                            CONSTANT character_J, 4A
 000                            CONSTANT character_K, 4B
 000                            CONSTANT character_L, 4C
 000                            CONSTANT character_M, 4D
 000                            CONSTANT character_N, 4E
 000                            CONSTANT character_O, 4F
 000                            CONSTANT character_P, 50
 000                            CONSTANT character_Q, 51
 000                            CONSTANT character_R, 52
 000                            CONSTANT character_S, 53
 000                            CONSTANT character_T, 54
 000                            CONSTANT character_U, 55
 000                            CONSTANT character_V, 56
 000                            CONSTANT character_W, 57
 000                            CONSTANT character_X, 58
 000                            CONSTANT character_Y, 59
 000                            CONSTANT character_Z, 5A
 000                            CONSTANT character_0, 30
 000                            CONSTANT character_1, 31
 000                            CONSTANT character_2, 32
 000                            CONSTANT character_3, 33
 000                            CONSTANT character_4, 34
 000                            CONSTANT character_5, 35
 000                            CONSTANT character_6, 36
 000                            CONSTANT character_7, 37
 000                            CONSTANT character_8, 38
 000                            CONSTANT character_9, 39
 000                            CONSTANT character_colon, 3A
 000                            CONSTANT character_stop, 2E
 000                            CONSTANT character_semi_colon, 3B
 000                            CONSTANT character_minus, 2D
 000                            CONSTANT character_divide, 2F       ;'/'
 000                            CONSTANT character_plus, 2B
 000                            CONSTANT character_comma, 2C
 000                            CONSTANT character_less_than, 3C
 000                            CONSTANT character_greater_than, 3E
 000                            CONSTANT character_equals, 3D
 000                            CONSTANT character_space, 20
 000                            CONSTANT character_CR, 0D           ;carriage return
 000                            CONSTANT character_question, 3F     ;'?'
 000                            CONSTANT character_dollar, 24
 000                            CONSTANT character_exclaim, 21      ;'!'
 000                            CONSTANT character_BS, 08           ;Back Space command character
 000                            ;
 000                            ;
 000                            ;
 000                            ;
 000                            ;
 000                            ;**************************************************************************************
 000                            ; Initialise the system
 000                            ;**************************************************************************************
 000                            ;
 000                cold_start: 
 000  00000                     LOAD s0, 00                         ;clear 1 second counter and clear LEDs
 001                            ;LOAD s5, 00                        ;initialize LED direction left
 001  2E004                     STORE s0, LED_pattern[04]
 002  2C080                     OUTPUT s0, LED_port[80]
 003  2C040                     OUTPUT s0, LED_0_port[40]
 004  3C001                     ENABLE INTERRUPT                    ;enable one second heart beat
 005                            ;**************************************************************************************
 005                            ; Main program
 005                            ;**************************************************************************************
 005                            ;
 005                            ; Display welcome message for design
 005                            ;
 005              main_program: 
 005  00101                     LOAD s1, 01                         ;turn LED 0 on
 006  2C140                     OUTPUT s1, LED_0_port[40]
 007  30035                     CALL delay_1s[035]
 008  00100                     LOAD s1, 00                         ;turn LED 0 off
 009  2C140                     OUTPUT s1, LED_0_port[40]
 00A  30035                     CALL delay_1s[035]                  ;
 00B  34005                     JUMP main_program[005]
 00C                            ;**************************************************************************************
 00C                            ; Routines to display hexadecimal values
 00C                            ;**************************************************************************************
 00C                            ;
 00C                            ;
 00C                            ; Convert hexadecimal value provided in register s0 into ASCII characters
 00C                            ;
 00C                            ; The value provided must can be any value in the range 00 to FF and will be converted into
 00C                            ; two ASCII characters.
 00C                            ;     The upper nibble will be represented by an ASCII character returned in register s3.
 00C                            ;     The lower nibble will be represented by an ASCII character returned in register s2.
 00C                            ;
 00C                            ; The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex
 00C                            ; added to the actual decimal value. The ASCII representations of 'A' to 'F' are 41 to 46
 00C                            ; hexadecimal requiring a further addition of 07 to the 30 already added.
 00C                            ;
 00C                            ; Registers used s0, s2 and s3.
 00C                            ;
 00C  01200  hex_byte_to_ASCII: LOAD s2, s0                         ;remember value supplied
 00D  2000E                     SR0 s0                              ;isolate upper nibble
 00E  2000E                     SR0 s0
 00F  2000E                     SR0 s0
 010  2000E                     SR0 s0
 011  30018                     CALL hex_to_ASCII[018]              ;convert
 012  01300                     LOAD s3, s0                         ;upper nibble value in s3
 013  01020                     LOAD s0, s2                         ;restore complete value
 014  0A00F                     AND s0, 0F                          ;isolate lower nibble
 015  30018                     CALL hex_to_ASCII[018]              ;convert
 016  01200                     LOAD s2, s0                         ;lower nibble value in s2
 017  2A000                     RETURN
 018                            ;
 018                            ; Convert hexadecimal value provided in register s0 into ASCII character
 018                            ;
 018                            ;Register used s0
 018                            ;
 018  1C00A       hex_to_ASCII: SUB s0, 0A                          ;test if value is in range 0 to 9
 019  3581B                     JUMP C, number_char[01B]
 01A  18007                     ADD s0, 07                          ;ASCII char A to F in range 41 to 46
 01B  1803A        number_char: ADD s0, 3A                          ;ASCII char 0 to 9 in range 30 to 40
 01C  2A000                     RETURN
 01D                            ;**************************************************************************************
 01D                            ; Software delay routines
 01D                            ;**************************************************************************************
 01D                            ;
 01D                            ; Delay of 1us.
 01D                            ;
 01D                            ; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
 01D                            ; instruction executes in 2 clock cycles making the calculation highly predictable.
 01D                            ; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
 01D                            ; in the initiating code. Interrupts may effect software derived delays.
 01D                            ;
 01D                            ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 01D                            ;
 01D                            ; Registers used s0
 01D                            ;
 01D  0000B          delay_1us: LOAD s0, delay_1us_constant[0B]
 01E  1C001           wait_1us: SUB s0, 01
 01F  3541E                     JUMP NZ, wait_1us[01E]
 020  2A000                     RETURN
 021                            ;
 021                            ; Delay of 40us.
 021                            ;
 021                            ; Registers used s0, s1
 021                            ;
 021  00128         delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
 022  3001D          wait_40us: CALL delay_1us[01D]
 023  1C101                     SUB s1, 01
 024  35422                     JUMP NZ, wait_40us[022]
 025  2A000                     RETURN
 026                            ;
 026                            ;
 026                            ; Delay of 1ms.
 026                            ;
 026                            ; Registers used s0, s1, s2
 026                            ;
 026  00219          delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
 027  30021           wait_1ms: CALL delay_40us[021]
 028  1C201                     SUB s2, 01
 029  35427                     JUMP NZ, wait_1ms[027]
 02A  2A000                     RETURN
 02B                            ;
 02B                            ; Delay of 20ms.
 02B                            ;
 02B                            ; Delay of 20ms used during initialisation.
 02B                            ;
 02B                            ; Registers used s0, s1, s2, s3
 02B                            ;
 02B  00314         delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
 02C  30026          wait_20ms: CALL delay_1ms[026]
 02D  1C301                     SUB s3, 01
 02E  3542C                     JUMP NZ, wait_20ms[02C]
 02F  2A000                     RETURN
 030  00364        delay_100ms: LOAD s3, 64                         ;100 x 1ms = 20ms
 031  30026         wait_100ms: CALL delay_1ms[026]
 032  1C301                     SUB s3, 01
 033  35431                     JUMP NZ, wait_100ms[031]
 034  2A000                     RETURN
 035                            ;
 035                            ; Delay of approximately 1 second.
 035                            ;
 035                            ; Registers used s0, s1, s2, s3, s4
 035                            ;
 035  00432           delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
 036  3002B            wait_1s: CALL delay_20ms[02B]
 037  1C401                     SUB s4, 01
 038  35436                     JUMP NZ, wait_1s[036]
 039  2A000                     RETURN
 03A                            ;
 03A                            ;
 03A                            ;
 03A                            ;**************************************************************************************
 03A                            ; Interrupt Service Routine (ISR)
 03A                            ;**************************************************************************************
 03A                            ;
 03A                            ; The interrupt is used purely to provide a 1 second heart beat binary counter pattern
 03A                            ; on the 8 LEDs.
 03A                            ;
 03A                       ISR: 
 03A  2E000                     STORE s0, ISR_preserve_s0[00]
 03B  2E101                     STORE s1, ISR_preserve_s1[01]
 03C  2E202                     STORE s2, ISR_preserve_s2[02]
 03D  2E303                     STORE s3, ISR_preserve_s3[03]
 03E  06104                     FETCH s1, ISR_restore_s1[04]        ;samples counter
 03F  06205                     FETCH s2, ISR_restore_s2[05]        ;samples carry counter
 040  06306                     FETCH s3, ISR_restore_s3[06]        ;interrupts counter
 041  04000                     INPUT s0, DATA_IN_PORT[00]          ;get audio sample
 042  14080                     COMPARE s0, 80                      ;check left bit for flash sample negative
 043  35846                     JUMP C, add_sample[046]             ;if positive, jump to add to counter
 044  0E0FF           absolute: XOR s0, FF                          ;take complement
 045  18001                     ADD s0, 01
 046                add_sample: 
 046  19100                     ADD s1, s0
 047  35852                     JUMP C, add_sample_carry[052]       ;if carry from samples adding
 048  18301        inc_counter: ADD s3, 01
 049  35854                     JUMP C, LED_80[054]                 ;if 256 values reached, divide samples by 256
 04A                    return: 
 04A  2E104                     STORE s1, ISR_restore_s1[04]
 04B  2E205                     STORE s2, ISR_restore_s2[05]
 04C  2E306                     STORE s3, ISR_restore_s3[06]
 04D  06000                     FETCH s0, ISR_preserve_s0[00]
 04E  06101                     FETCH s1, ISR_preserve_s1[01]
 04F  06202                     FETCH s2, ISR_preserve_s2[02]
 050  06303                     FETCH s3, ISR_preserve_s3[03]
 051  38001                     RETURNI ENABLE
 052          add_sample_carry: 
 052  18201                     ADD s2, 01                          ;carry from add_sample
 053  34048                     JUMP inc_counter[048]
 054                    LED_80: 
 054  20206                     SL0 s2                              ;check for 1000_0000
 055  35C59                     JUMP NC, LED_40[059]
 056  001FF                     LOAD s1, FF                         ;LED output 1111_1111
 057  2C180                     OUTPUT s1, LED_port[80]
 058  3407D                     JUMP reset[07D]
 059                    LED_40: 
 059  20206                     SL0 s2                              ;check for 0100_0000
 05A  35C5E                     JUMP NC, LED_20[05E]
 05B  001FE                     LOAD s1, FE                         ;LED output 1111_1110
 05C  2C180                     OUTPUT s1, LED_port[80]
 05D  3407D                     JUMP reset[07D]
 05E                    LED_20: 
 05E  20206                     SL0 s2                              ;check for 0010_0000
 05F  35C63                     JUMP NC, LED_10[063]
 060  001FC                     LOAD s1, FC                         ;LED output 1111_1100
 061  2C180                     OUTPUT s1, LED_port[80]
 062  3407D                     JUMP reset[07D]
 063                    LED_10: 
 063  20206                     SL0 s2                              ;check for 0001_0000
 064  35C68                     JUMP NC, LED_08[068]
 065  001F8                     LOAD s1, F8                         ;LED output 1111_1000
 066  2C180                     OUTPUT s1, LED_port[80]
 067  3407D                     JUMP reset[07D]
 068                    LED_08: 
 068  20206                     SL0 s2                              ;check for 0000_1000
 069  35C6D                     JUMP NC, LED_04[06D]
 06A  001F0                     LOAD s1, F0                         ;LED output 1111_0000
 06B  2C180                     OUTPUT s1, LED_port[80]
 06C  3407D                     JUMP reset[07D]
 06D                    LED_04: 
 06D  20206                     SL0 s2                              ;check for 1000_0100
 06E  35C72                     JUMP NC, LED_02[072]
 06F  001E0                     LOAD s1, E0                         ;LED output 1110_0000
 070  2C180                     OUTPUT s1, LED_port[80]
 071  3407D                     JUMP reset[07D]
 072                    LED_02: 
 072  20206                     SL0 s2                              ;check for 0000_0010
 073  35C77                     JUMP NC, LED_01[077]
 074  001C0                     LOAD s1, C0                         ;LED output 1100_0000
 075  2C180                     OUTPUT s1, LED_port[80]
 076  3407D                     JUMP reset[07D]
 077                    LED_01: 
 077  20206                     SL0 s2                              ;check for 0000_0001
 078  35C7B                     JUMP NC, LED_00[07B]
 079  00180                     LOAD s1, 80                         ;LED output 1000_0000
 07A  2C180                     OUTPUT s1, LED_port[80]
 07B                    LED_00: 
 07B  00100                     LOAD s1, 00                         ;LED output 1000_0000
 07C  2C180                     OUTPUT s1, LED_port[80]
 07D                     reset: 
 07D  00100                     LOAD s1, 00
 07E  00200                     LOAD s2, 00
 07F  00300                     LOAD s3, 00
 080  3404A                     JUMP return[04A]
 081                            ;
 081                            ;
 081                            ;**************************************************************************************
 081                            ; Interrupt Vector
 081                            ;**************************************************************************************
 081                            ;
 3FF                            ADDRESS 3FF
 3FF  3403A                     JUMP ISR[03A]
 3FF                            ;
 3FF                            ;
